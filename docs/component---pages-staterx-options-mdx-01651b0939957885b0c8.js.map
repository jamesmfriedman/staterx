{"version":3,"sources":["webpack:///../pages/staterx-options.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"2eAMO,IAAMA,EAAe,Q,2MAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,WADR,WAGA,2EACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,2kBAeL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+MAWL,oIACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,6O,yMAeTJ,EAAWK,gBAAiB","file":"component---pages-staterx-options-mdx-01651b0939957885b0c8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesmfriedman/Sites/staterx/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"options\"\n    }}>{`Options`}</h1>\n    <p>{`All StateRx Objects have a similar api and options`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`createValue(opts: {\n  /** An optional default value for your StateRx Object. */\n  default?: any, \n  /** An optional name for your value. One will be generated for you if not provided. Useful when using devtools. */\n  key?: string;\n  /** Automatically start listening for changes on this branch. Defaults to true. */\n  autoRun?: boolean;\n  /** Declare effects on the StateRx Objects */\n  effects?: (srx: Api) => Effects;\n  /** Optionally declare an additional reducer if you're using Flux style architecture. */\n  reducer?: (state: State, action: AnyAction) => State;\n})\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const value = createValue({\n  key: 'myValue',\n  default: 0,\n  effects: ({ state$ }) => ({\n    increment: () => value.set(val => val + 1),\n    decrement: () => value.set(val => val - 1)\n  })\n});\n`}</code></pre>\n    <p>{`When adding your own custom effects, all built in ones are available to your effects function as arguments.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const value = createValue({\n  key: 'myValue',\n  default: 0,\n  effects: ({ state$, action$, dispatch, set, get, reset }) => ({\n    increment: () => set(val => val + 1),\n    decrement: () => set(val => val - 1)\n  })\n});\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}