(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"8LZq":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return i}));n("5hJT"),n("W1QL"),n("K/PF"),n("t91x"),n("75LO"),n("PJhk");var a=n("/FXl"),r=n("TjRS");n("aD51");function o(){return(o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}var l={};void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"pages/staterx-options.mdx"}});var s={_frontmatter:l},c=r.a;function i(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(c,o({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",{id:"options"},"Options"),Object(a.b)("p",null,"All StateRx Objects have a similar api and options"),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-ts"}),"createValue(opts: {\n  /** An optional default value for your StateRx Object. */\n  default?: any, \n  /** An optional name for your value. One will be generated for you if not provided. Useful when using devtools. */\n  key?: string;\n  /** Automatically start listening for changes on this branch. Defaults to true. */\n  autoRun?: boolean;\n  /** Declare effects on the StateRx Objects */\n  effects?: (srx: Api) => Effects;\n  /** Optionally declare an additional reducer if you're using Flux style architecture. */\n  reducer?: (state: State, action: AnyAction) => State;\n})\n")),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const value = createValue({\n  key: 'myValue',\n  default: 0,\n  effects: ({ state$ }) => ({\n    increment: () => value.set(val => val + 1),\n    decrement: () => value.set(val => val - 1)\n  })\n});\n")),Object(a.b)("p",null,"When adding your own custom effects, all built in ones are available to your effects function as arguments."),Object(a.b)("pre",null,Object(a.b)("code",o({parentName:"pre"},{className:"language-js"}),"const value = createValue({\n  key: 'myValue',\n  default: 0,\n  effects: ({ state$, action$, dispatch, set, get, reset }) => ({\n    increment: () => set(val => val + 1),\n    decrement: () => set(val => val - 1)\n  })\n});\n")))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"pages/staterx-options.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---pages-staterx-options-mdx-01651b0939957885b0c8.js.map