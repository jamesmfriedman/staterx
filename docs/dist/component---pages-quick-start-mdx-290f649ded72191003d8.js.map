{"version":3,"sources":["webpack:///../pages/quick-start.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","useRx","counter","count","state$","numCalls","callCount$","onClick","decrement","increment","reset","isMDXComponent"],"mappings":"6gBASO,IAAMA,EAAe,Q,uMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,eADR,eAGA,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,0BAAYC,WAAW,KAAvB,sBAAH,SAEF,0BAAYA,WAAW,KAAvB,0BACE,iBAAQ,CACN,GAAM,mBADR,mBAGA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oSAaL,mTACA,0OAAyN,0BAAYA,WAAW,KAAvB,WAAzN,+DACA,iBAAQ,CACN,GAAM,WADR,WAGA,8BAAa,kBAAIA,WAAW,KAAf,0EAAkG,uBAA/G,WACI,kBAAIA,WAAW,KAAf,8CACJ,8BACE,iBAAGA,WAAW,cAAd,8XAEF,0QACA,kGACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+wBAuBL,iBAAQ,CACN,GAAM,iBADR,iBAGA,oIAAmH,0BAAYA,WAAW,KAAvB,SAAnH,iDAAsN,0BAAYA,WAAW,KAAvB,SAAtN,kFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oDAIL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,gaAAiaC,SAAO,GACzcL,QACAH,kBACAS,eACAC,UACAC,aALyc,gBAMzcX,IANyc,EAOzcH,eAPyc,GAQxcO,QAAQ,eAAc,WAAM,IACpBQ,EAASF,YAAMC,IAAQE,QADH,GAEpBC,EAAYJ,YAAMC,IAAQI,YAFN,GAG3B,OAAO,gCACX,sBAAQC,QAASL,IAAQM,WAAzB,eAGA,sBAAQD,QAASL,IAAQO,WAAzB,eAGA,sBAAQF,QAASL,IAAQQ,OAAzB,SAGA,sBACE,gCAAYP,GACZ,oCAAgBE,c,qMAQtBb,EAAWmB,gBAAiB","file":"component---pages-quick-start-mdx-290f649ded72191003d8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesmfriedman/Sites/staterx/docs/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { useRx } from 'staterx';\nimport { counter } from './examples';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"quick-start\"\n    }}>{`Quick Start`}</h1>\n    <h2 {...{\n      \"id\": \"install\"\n    }}>{`Install`}</h2>\n    <p><inlineCode parentName=\"p\">{`npm i staterx rxjs`}</inlineCode>{`\nor\n`}<inlineCode parentName=\"p\">{`yarn add staterx rxjs`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"counter-example\"\n    }}>{`Counter Example`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createValue } from 'staterx';\n\n// create a counter\n// counter holds a value and a basic api\n// get, set, reset, and state$\nconst counter = createValue(0);\n\nconsole.log(counter.get()); // logs 0\ncounter.set(1); // update the value\nconsole.log(counter.get()); // logs 1\n`}</code></pre>\n    <p>{`In the most basic example, we have a single value that we are creating and updating imperatively. RxJS natives are probably thinking \"isn't this just a Behavior Subject?\" Obviously in this contrived example, it's not obvious that we have any benefit over using a regular variable.`}</p>\n    <p>{`The real power of this example is that we actualy just created a stateful stream we can hook into by using RxJS as well as an idiomatic api for basic functionality like getting and setting. We can also specify `}<inlineCode parentName=\"p\">{`effects`}</inlineCode>{` to indicate how we want this variable to change over time.`}</p>\n    <h2 {...{\n      \"id\": \"effects\"\n    }}>{`Effects`}</h2>\n    <p>{`Noun: `}<em parentName=\"p\">{`a change which is a result or consequence of an action or other cause.`}</em><br />{`\nVerb: `}<em parentName=\"p\">{`cause (something) to happen; bring about.`}</em></p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`One of this inspirations for this library was an article (that I can no longer find to link to...) that talked about how state management in JS has gotten out of control over the years. After years of doing Redux we've ended up with Stores, Dispatchers, Actions, Selectors, Thunks, Epics, Sagas, Side Effects, and Actors. For StateRx, these concepts are just called \"effects\".`}</p>\n    </blockquote>\n    <p>{`Effects allow us to specify how we want to change one of our stateful values, and also how we would like to read them through computed changes. If you're coming from Redux, you might have heard them referred to as \"actions\" and \"selectors\".`}</p>\n    <p>{`Lets update our example to be a bit more useful and include some effects.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createValue } from 'staterx';\nimport { scan } from 'rxjs/operators';\n\nconst counter = createValue(0, {\n  effects: ({ state$ }) => ({\n    // here we create two functions that describe how we want to change our value\n    increment: () => counter.set(val => val + 1),\n    decrement: () => counter.set(val => val - 1),\n    // here we create an observable that can keep count of the total number of\n    // times our counter has changed, regardless of direction\n    callCount$: state$.pipe(scan(acc => acc + 1, -1))\n  })\n});\n\ncounter.state$.subscribe(val => console.log(val)); // logs 0\ncounter.increment(); // logs 1\ncounter.decrement(); // logs 0\n\n// we can also subscribe to our callCount$ effect\ncounter.callCount$.subscribe(val => console.log(val));\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"react-example\"\n    }}>{`React Example`}</h2>\n    <p>{`StateRx ships with a hooks for React so you can directly consume your state in your components. Just import `}<inlineCode parentName=\"p\">{`useRx`}</inlineCode>{` and pass your variable's state$ to the hook. `}<inlineCode parentName=\"p\">{`useRx`}</inlineCode>{` actually works with more than just StateRx, you can pass any RxJS Observable.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { createValue, useRx } from 'staterx';\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [count] = useRx(counter.state$)\\n  const [numCalls] = useRx(counter.callCount$)\\n  return (\\n    <>\\n      <button onClick={counter.decrement}>- Decrement</button>\\n      <button onClick={counter.increment}>+ Increment</button>\\n      <button onClick={counter.reset}>Reset</button>\\n      <ul>\\n        <li>Count: {count}</li>\\n        <li>Num Calls: {numCalls}</li>\\n      </ul>\\n    </>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      useRx,\n      counter,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">{() => {\n        const [count] = useRx(counter.state$);\n        const [numCalls] = useRx(counter.callCount$);\n        return <>\n    <button onClick={counter.decrement}>\n      - Decrement\n    </button>\n    <button onClick={counter.increment}>\n      + Increment\n    </button>\n    <button onClick={counter.reset}>\n      Reset\n    </button>\n    <ul>\n      <li>Count: {count}</li>\n      <li>Num Calls: {numCalls}</li>\n    </ul>\n  </>;\n      }}</Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}