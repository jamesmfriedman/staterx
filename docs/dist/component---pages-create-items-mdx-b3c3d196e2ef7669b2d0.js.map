{"version":3,"sources":["webpack:///../pages/create-items.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,wMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,oFACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,oRAUL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gHAOL,iBAAQ,CACN,GAAM,OADR,OAGA,kDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qGAIL,iBAAQ,CACN,GAAM,OADR,OAGA,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wDAIL,iBAAQ,CACN,GAAM,SADR,SAGA,gDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uBAIL,iBAAQ,CACN,GAAM,UADR,UAGA,8LAA6K,0BAAYA,WAAW,KAAvB,cAA7K,qEAAyS,0BAAYA,WAAW,KAAvB,eAAzS,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,gKAQL,iBAAQ,CACN,GAAM,UADR,UAGA,uHACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qMAWL,iBAAQ,CACN,GAAM,UADR,UAGA,uDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4JASL,iBAAQ,CACN,GAAM,SADR,UAGA,mFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iIAIL,iBAAQ,CACN,GAAM,OADR,QAGA,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mHAIL,iBAAQ,CACN,GAAM,QADR,QAGA,4EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0FAIL,iBAAQ,CACN,GAAM,SADR,SAGA,sFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4IAIL,iBAAQ,CACN,GAAM,YADR,YAGA,yJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2O,sMAkBTJ,EAAWK,gBAAiB","file":"component---pages-create-items-mdx-b3c3d196e2ef7669b2d0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesmfriedman/Sites/staterx/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"createitems\"\n    }}>{`createItems`}</h1>\n    <p>{`Creates a normalized map of items, stored by a primary key.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`createItems(initialValue: {[id: string]: any}, opts: {\n  ...DefaultOptions,\n  /** A default item to shallowly merge into newly created items. */\n  defaultItem?: Partial<T>;\n  /** A custom method for generating IDs for new items. */\n  generateId?: () => string;\n})\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myState = createItems({\n  '1': { id: '1', text: 'hello' },\n  '2': { id: '2', text: 'world' }\n});\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"get\"\n    }}>{`get`}</h2>\n    <p>{`Returns all items as map.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.get(); // returns { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set\"\n    }}>{`set`}</h2>\n    <p>{`Sets all items.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.set({ '1': { id: '1', todo: 'hello' } });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reset\"\n    }}>{`reset`}</h2>\n    <p>{`Reset to initial value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.reset();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"create\"\n    }}>{`create`}</h2>\n    <p>{`Create one or more new items. If no ID is passed a UUID will be autogenerated for the new items. Note, you can customize how ID's get autoGenerated by passing in the `}<inlineCode parentName=\"p\">{`generateId`}</inlineCode>{` option when creating your StateRx Object. You can also specify a `}<inlineCode parentName=\"p\">{`defaultItem`}</inlineCode>{` which will be shallowly merged into your newly created one.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.create({ id: '2', todo: 'text' });\nmyState.create([\n  { id: '2', todo: 'text' },\n  { todo: 'text' } // this will have an autoGenerated id\n]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"update\"\n    }}>{`update`}</h2>\n    <p>{`Shallowly update one or more items. You must include the id of the object(s) you are updating.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// update one item\nmyState.update({ id: '3', todo: 'updated text' });\n\n// update multiple\nmyState.update([\n  { id: '1', todo: 'updated text' },\n  { id: '2', todo: 'updated text' }\n]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"remove\"\n    }}>{`remove`}</h2>\n    <p>{`Remove one or more items by ID`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// a single id\nmyState.remove('3');\n// an array of ids\nmyState.remove(['2', '3']);\n// an object with an id property\nmyState.remove({ id: '2' });\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"state\"\n    }}>{`state$`}</h2>\n    <p>{`An Observable of the current value, a map of id to object.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.state$.subscribe(val => console.log(val)); // { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"all\"\n    }}>{`all$`}</h2>\n    <p>{`An Observable of all items as an array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.all$.subscribe(val => console.log(val)); // [{ id: '1', text: 'hello' }, { id: '2', text: 'world' }]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"byid\"\n    }}>{`byId`}</h2>\n    <p>{`Create an Observable that emits a single item by ID`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.byId('1').subscribe(val => console.log(val)); // { id: '1', text: 'hello' }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"byids\"\n    }}>{`byIds`}</h2>\n    <p>{`Create an Observable that emits a map of multiple items by ID`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.byIds(['1', '2']).subscribe(val => console.log(val)); // { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"mapbykey\"\n    }}>{`mapByKey`}</h2>\n    <p>{`Create an Observable that emits a map of multiple items by a specific key's value. This is similar to an SQL group by statement.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.mapByKey('text').subscribe(val => console.log(val));\n\n// {\n//   hello: [\n//     {id: '1', text: 'hello'},\n//     {id: '2', text: 'hello'}\n//   ],\n//   world: [\n//     {id: '3', text: 'world'},\n//   ]\n// }\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}