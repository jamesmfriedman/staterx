(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{pGwj:function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return o})),a.d(t,"default",(function(){return i}));a("5hJT"),a("W1QL"),a("K/PF"),a("t91x"),a("75LO"),a("PJhk");var n=a("/FXl"),l=a("TjRS");a("aD51");function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var a=arguments[t];for(var n in a)Object.prototype.hasOwnProperty.call(a,n)&&(e[n]=a[n])}return e}).apply(this,arguments)}var o={};void 0!==o&&o&&o===Object(o)&&Object.isExtensible(o)&&!o.hasOwnProperty("__filemeta")&&Object.defineProperty(o,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"pages/create-items.mdx"}});var b={_frontmatter:o},s=l.a;function i(e){var t=e.components,a=function(e,t){if(null==e)return{};var a,n,l={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,["components"]);return Object(n.b)(s,r({},b,a,{components:t,mdxType:"MDXLayout"}),Object(n.b)("h1",{id:"createitems"},"createItems"),Object(n.b)("p",null,"Creates a normalized map of items, stored by a primary key."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"createItems(initialValue: {[id: string]: any}, opts: {\n  ...DefaultOptions,\n  /** A default item to shallowly merge into newly created items. */\n  defaultItem?: Partial<T>;\n  /** A custom method for generating IDs for new items. */\n  generateId?: () => string;\n})\n")),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"const myState = createItems({\n  '1': { id: '1', text: 'hello' },\n  '2': { id: '2', text: 'world' }\n});\n")),Object(n.b)("h2",{id:"get"},"get"),Object(n.b)("p",null,"Returns all items as map."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.get(); // returns { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n")),Object(n.b)("h2",{id:"set"},"set"),Object(n.b)("p",null,"Sets all items."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.set({ '1': { id: '1', todo: 'hello' } });\n")),Object(n.b)("h2",{id:"reset"},"reset"),Object(n.b)("p",null,"Reset to initial value."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.reset();\n")),Object(n.b)("h2",{id:"create"},"create"),Object(n.b)("p",null,"Create one or more new items. If no ID is passed a UUID will be autogenerated for the new items. Note, you can customize how ID's get autoGenerated by passing in the ",Object(n.b)("inlineCode",{parentName:"p"},"generateId")," option when creating your StateRx Object. You can also specify a ",Object(n.b)("inlineCode",{parentName:"p"},"defaultItem")," which will be shallowly merged into your newly created one."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.create({ id: '2', todo: 'text' });\nmyState.create([\n  { id: '2', todo: 'text' },\n  { todo: 'text' } // this will have an autoGenerated id\n]);\n")),Object(n.b)("h2",{id:"update"},"update"),Object(n.b)("p",null,"Shallowly update one or more items. You must include the id of the object(s) you are updating."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"// update one item\nmyState.update({ id: '3', todo: 'updated text' });\n\n// update multiple\nmyState.update([\n  { id: '1', todo: 'updated text' },\n  { id: '2', todo: 'updated text' }\n]);\n")),Object(n.b)("h2",{id:"remove"},"remove"),Object(n.b)("p",null,"Remove one or more items by ID"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"// a single id\nmyState.remove('3');\n// an array of ids\nmyState.remove(['2', '3']);\n// an object with an id property\nmyState.remove({ id: '2' });\n")),Object(n.b)("h2",{id:"state"},"state$"),Object(n.b)("p",null,"An Observable of the current value, a map of id to object."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.state$.subscribe(val => console.log(val)); // { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n")),Object(n.b)("h2",{id:"all"},"all$"),Object(n.b)("p",null,"An Observable of all items as an array."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.all$.subscribe(val => console.log(val)); // [{ id: '1', text: 'hello' }, { id: '2', text: 'world' }]\n")),Object(n.b)("h2",{id:"byid"},"byId"),Object(n.b)("p",null,"Create an Observable that emits a single item by ID"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.byId('1').subscribe(val => console.log(val)); // { id: '1', text: 'hello' }\n")),Object(n.b)("h2",{id:"byids"},"byIds"),Object(n.b)("p",null,"Create an Observable that emits a map of multiple items by ID"),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.byIds(['1', '2']).subscribe(val => console.log(val)); // { '1': { id: '1', text: 'hello' }, '2': { id: '2', text: 'world' } }\n")),Object(n.b)("h2",{id:"mapbykey"},"mapByKey"),Object(n.b)("p",null,"Create an Observable that emits a map of multiple items by a specific key's value. This is similar to an SQL group by statement."),Object(n.b)("pre",null,Object(n.b)("code",r({parentName:"pre"},{className:"language-js"}),"myState.mapByKey('text').subscribe(val => console.log(val));\n\n// {\n//   hello: [\n//     {id: '1', text: 'hello'},\n//     {id: '2', text: 'hello'}\n//   ],\n//   world: [\n//     {id: '3', text: 'world'},\n//   ]\n// }\n")))}void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"pages/create-items.mdx"}}),i.isMDXComponent=!0}}]);
//# sourceMappingURL=component---pages-create-items-mdx-b3c3d196e2ef7669b2d0.js.map