{"version":3,"sources":["webpack:///../pages/typescript.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"yeAMO,IAAMA,EAAe,Q,sMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,cADR,cAGA,oMACA,uBAAK,sBAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,gMAYL,iBAAQ,CACN,GAAM,mBADR,mBAGA,6IAA4H,kBAAIA,WAAW,KAAf,OAA5H,uKACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0RAaL,uEAAsD,0BAAYA,WAAW,KAAvB,eAAtD,QAAsH,0BAAYA,WAAW,KAAvB,eAAtH,KACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,sKAYL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,oLAYL,4FACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0MAcL,8IACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,wN,oMAYTJ,EAAWK,gBAAiB","file":"component---pages-typescript-mdx-c0971b11a87e6ea39452.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesmfriedman/Sites/staterx/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"typescript\"\n    }}>{`Typescript`}</h1>\n    <p>{`Typescript is supported without any additional configuration. StateRx relies heavily on type inference and often times you don't have to do anything to support typesafety.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createValue } from 'staterx';\n\nconst myState = createValue(0);\n\nmyState.get(); // number\n\nmyState.state$.subscribe(val => val); // number\n\nmyState.set('test'); // ERROR\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"casting-to-type\"\n    }}>{`Casting to Type`}</h2>\n    <p>{`While Typescript's inference engine is incredibly powerful, the current version of it also ships with a long running `}<em parentName=\"p\">{`bug`}</em>{`. You can only infer everything or nothing... To get around this with StateRx, instead of passing in a generic type, we cast the initial value to whatever we want.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createValue } from 'staterx';\n\n// What if we want myState to be a number or a string?\nconst myState = createValue(0 as number | string);\n\nmyState.get(); // number | string\n\nmyState.state$.subscribe(val => val); // number | string\n\nmyState.set('test'); // OK\n`}</code></pre>\n    <p>{`This becomes extra necessary when dealing with `}<inlineCode parentName=\"p\">{`createItems`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`createArray`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createArray } from 'staterx';\n\ntype Todo = {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nconst myState = createArray([] as Todo[]);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createItems } from 'staterx';\n\ntype Todo = {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nconst myState = createItems({} as {[id: string]: Todo});\n`}</code></pre>\n    <p>{`Alternatively, you can just declare your initial state with a type.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`import { createArray } from 'staterx';\n\ntype Todo = {\n  id: string;\n  text: string;\n  completed: boolean;\n}\n\nconst initialState: Todo[] = [];\n\nconst myState = createArray(initialState);\n`}</code></pre>\n    <p>{`Lastly, DON'T do this!!! Ideally, this is what you would want to do, but for now due to the bug in TS, it won't work.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-ts\"\n      }}>{`// DON'T DO THIS!\n// While it is perfectly valid Typescript\n// it breaks inference of other generics\nconst myState = createArray<Todo>([]);\n// If you did this, you just broke a lot of your typesafety\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}