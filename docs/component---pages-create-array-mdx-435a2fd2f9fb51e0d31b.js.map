{"version":3,"sources":["webpack:///../pages/create-array.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,wMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,eADR,eAGA,gFACA,8BACE,iBAAGC,WAAW,cAAd,qQAEF,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8DAIL,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8CAIL,iBAAQ,CACN,GAAM,OADR,OAGA,mDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,0CAIL,iBAAQ,CACN,GAAM,OADR,OAGA,wCACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iEAKL,iBAAQ,CACN,GAAM,SADR,SAGA,gDACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uBAIL,iBAAQ,CACN,GAAM,QADR,QAGA,2EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,2CAKL,iBAAQ,CACN,GAAM,OADR,OAGA,iEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qBAIL,iBAAQ,CACN,GAAM,SADR,SAGA,kEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uBAIL,iBAAQ,CACN,GAAM,WADR,WAGA,gEACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,uBAIL,iBAAQ,CACN,GAAM,WADR,WAGA,4CACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,yBAIL,iBAAQ,CACN,GAAM,QADR,QAGA,gFACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,qCAIL,iBAAQ,CACN,GAAM,UADR,UAGA,gJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,4BAIL,iBAAQ,CACN,GAAM,SADR,UAGA,4DACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,8EAIL,iBAAQ,CACN,GAAM,WADR,WAGA,8EACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,mIAKL,iBAAQ,CACN,GAAM,SADR,SAGA,uJACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,iIAKL,iBAAQ,CACN,GAAM,uBADR,uBAGA,4DAA2C,0BAAYA,WAAW,KAAvB,OAA3C,QAAmG,0BAAYA,WAAW,KAAvB,UAAnG,sMACA,uBAAK,sBAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,kR,sMAYTJ,EAAWK,gBAAiB","file":"component---pages-create-array-mdx-435a2fd2f9fb51e0d31b.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/jamesmfriedman/Sites/staterx/docs-src/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"createarray\"\n    }}>{`createArray`}</h1>\n    <p>{`Creates an observable array. The methods implemented mi`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`To avoid any confusion with immutable methods like map and reduce, StateRx has only implemented the mutable properties of arrays. Additionally, methods such as pop don't immediately return values. You should subscribe to state$ to get newly emitted values.`}</p>\n    </blockquote>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`createArray(initialValue: any[], opts: DefaultOptions);\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const myState = createArray([1, 2, 3]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"get\"\n    }}>{`get`}</h2>\n    <p>{`Returns the current array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.get(); // returns [1, 2, 3]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"set\"\n    }}>{`set`}</h2>\n    <p>{`Sets the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.set([1, 2]);\nmyState.set(currentValue => [1, 2]);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reset\"\n    }}>{`reset`}</h2>\n    <p>{`Reset to initial value.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.reset();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"push\"\n    }}>{`push`}</h2>\n    <p>{`Adds one or more elements to the end of the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.push(4);\nmyState.push(4,5);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"pop\"\n    }}>{`pop`}</h2>\n    <p>{`Removes the last element from the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.pop();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shift\"\n    }}>{`shift`}</h2>\n    <p>{`Removes the first element from the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.shift();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"unshift\"\n    }}>{`unshift`}</h2>\n    <p>{`Adds one or more elements to the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.shift();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"reverse\"\n    }}>{`reverse`}</h2>\n    <p>{`Reverses the array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.reverse();\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sort\"\n    }}>{`sort`}</h2>\n    <p>{`Sorts the array based on the compare function provided.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.sort((a, b) => a - b);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"splice\"\n    }}>{`splice`}</h2>\n    <p>{`Removes elements from an array and, if necessary, inserts new elements in their place, returning the deleted elements..`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.splice(0, 1);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"state\"\n    }}>{`state$`}</h2>\n    <p>{`An Observable of the current array,`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`myState.state$.subscribe(val => console.log(val)); // returns [1, 2, 3]\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"byindex\"\n    }}>{`byIndex`}</h2>\n    <p>{`Creates an observable that emits an element by index.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// always emit whatever the second index is anytime the array changes\nmyState.byIndex(2).subscribe(val => console.log(val))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"slice\"\n    }}>{`slice`}</h2>\n    <p>{`Creates an observable that emits a new section of an array. This takes all of the same arguments as the native slice function.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// emits whatever the first 2 items are anytime the array changes.\nmyState.slice(0, 2).subscribe(val => console.log(val))\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"immutable-functions\"\n    }}>{`Immutable Functions`}</h2>\n    <p>{`What about immutable functions like `}<inlineCode parentName=\"p\">{`map`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`reduce`}</inlineCode>{`? As stated in the intro, that have been purposely left out to avoid confusion. But you can still use the native built in ones with the set method if you would like to modify the existing array.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`// Map over the current array and set a new value\nmyState.set(currVal => currVal.map(val => val + 1));\n\n// Map over the current array and return it. This will not impact the current state of myState at all.\nconst newArr = myState.get().map(val => val + 1));\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}